buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}



group = 'com.connectly'
version = '0.1.0-SNAPSHOT'


java {
    sourceCompatibility = '21'
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://jitpack.io' }

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.2"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //REDISSON
    implementation 'org.redisson:redisson-spring-boot-starter:3.30.0'

    //HIBERNATE
    implementation 'org.hibernate:hibernate-core:6.2.7.Final'

    // QueryDSL
    implementation "com.querydsl:querydsl-sql:${queryDslVersion}"
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //MySql
    runtimeOnly 'com.mysql:mysql-connector-j'

    //SPRING BOOT FOR TEST
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //REST DOCS
    testImplementation 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    //EASY RANDOM
    testImplementation 'org.jeasy:easy-random-core:5.0.0'


    //REDIS FOR TEST
    testImplementation 'org.testcontainers:junit-jupiter:1.17.3'
    testImplementation "org.testcontainers:testcontainers:1.17.3"

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.named('test') {
    useJUnitPlatform()
}


ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir

    sources {
        include("**/index.adoc", "**/common/*.adoc")
    }
    attributes 'snippets': snippetsDir

    baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}


// QueryDSL 설정
def querydslDir = "$buildDir/generated/querydsl"
clean {
    delete file(querydslDir)
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

sourceSets {
    main {
        java {
            srcDir querydslDir
        }
    }
}